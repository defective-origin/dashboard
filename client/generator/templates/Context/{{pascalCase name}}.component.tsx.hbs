import React, { useMemo } from 'react'

// ---| common |---
import { useObject } from 'common/hooks'

// ---| self |---
import {
  {{pascalCase name}}Context,
  {{pascalCase name}}Actions,
  {{pascalCase name}}Options,
  DEFAULT_{{constantCase name}}_STATE,
} from './{{pascalCase name}}.context'

export type {{pascalCase name}}Props = React.PropsWithChildren

/**
 * Setup {{pascalCase name}} context providers.
 *
 * How to use
 * @example
 * <{{pascalCase name}} defaultProp={1} />
 */
export function {{pascalCase name}}(props: {{pascalCase name}}Props): JSX.Element {
  const value = useObject(DEFAULT_{{constantCase name}}_STATE)

  // actions are separated to prevent side effects
  // if we subscribe to change dependencies. Example: useHook(val, [dep1, dep2])
  const actions = useMemo<{{pascalCase name}}Actions>(() => ({
    change: value.merge,
  }), [value])

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const options = useMemo<{{pascalCase name}}Options>(() => ({ ...value.current, ...actions }), [value.current, actions])

  return <{{pascalCase name}}Context.Provider value={options} {...props} />
}

{{pascalCase name}}.displayName = '{{pascalCase name}}'

export default {{pascalCase name}}
