FIXME: IMPROVEMENT
FIXME: 1) i18n or intl
FIXME: 2) add env file import constants
FIXME: 3) add generators
FIXME:   - component (base (component, styles), full)
FIXME:   - screen (base (component, styles), full)
FIXME:   - page (base (component, styles), full)
FIXME:   - store
FIXME:     - slice
FIXME:   - common
FIXME:     - hook
FIXME:     - service
FIXME:     - model
FIXME:     - util
FIXME:   full structure

FIXME: reimplement
FIXME:   - Card header footer content [extra size]
FIXME:   - Backdrop
FIXME:   - ModalWindow
FIXME:   - Drawer
FIXME:   - Tabs [extra size]
FIXME:   - Divider
FIXME:   - table

FIXME: COMPONENTS
FIXME: ADD TABLE component
FIXME: ADD RichTextComponent component
FIXME: add menu
FIXME: add page viewer
FIXME: add widget
FIXME: component which render dmo backend map { id, name: 'a', url: 'asd' ...adds(additional information which renders dynamically), endpoints: [{ id, name: 'a', url: 'asd' }, { name: 'a', url: 'asd' }]}

FIXME: __tests__
FIXME: setupTests does not work
FIXME: add options (config), labels for each component
FIXME: DevOps folder in git
FIXME: remove all prefixes from internal component classes css.ArticleMenu => css.Menu
FIXME: add prefix @ to path aliases
FIXME: add selectionBoardItem ViewBoartdItem


FIXME: style for all attributes single quater  attr='value'
FIXME: data for widget
{
  x
  y
  x2
  y2
  position: { x y x2 y2 }
  config: {}
  data: {}
  translate: {}
}
FIXME: автогенератор форм

FIXME: add storybook
FIXME: env context and providers?
FIXME: добавить level index в repeat
FIXME: Сделать ViewBoard через грид? или потеряю в производительности из-за не выноса на слой
FIXME: linter
          - jsdoc
          - hook deps


storybook + microfrontend
store vs hook vs redux toolkit vs self reducer in context vs hook which save variable in global scope
add storybook

widget managment system WMS, 
microfrontend managment system MMS


FIXME: pages:
- feature toggler
- boards
- widgets
- develop
- translator / localizator + google trans if turn on


list https://mui.com/material-ui/react-list/
table https://mui.com/material-ui/react-table/
grid https://mui.com/x/react-data-grid/ https://mui.com/material-ui/react-grid/
accordion https://mui.com/material-ui/react-accordion/
tabs https://mui.com/material-ui/react-tabs/
container layout https://mui.com/material-ui/react-container/
portal https://mui.com/material-ui/react-portal/


перехватывать ошибку виджета чтобы приложение не падало

FIXME: add button component
FIXME: theme: background, color
FIXME: add link style
FIXME: add Repeat options into Grid and Flex
FIXME: virtual scroll hook
FIXME: add loader Context and Component
FIXME: add Mock context component for each context
FIXME: add Loading Suspense context
FIXME: add Router context
FIXME:  add  lerna  --parallel
// FIXME: add context { title, content, actions }

// vertical  horizontal both  -> x  y  xy l r t b
// implement  all  intestest components  antd
// scroll  margin
//  левую  полоску  для  меню
//  AppContext, notification(lt, rt, lb,  rb),  message(center),  modal, theme,  size, locale
//  контекст для прогресса { loading: true, progress: boolean, type: 'nearest' | 'root' } spinner
// FeatureFlagContext, Loadin/SpinerContext

// FIXME: modalwindow/snackbar context { children/content, ...confparams }
modelWindow.context.ts
snackbar.context.ts
table.context.ts - { item, view, selector }

modalWindow/snackbar/message/table info {
title: ReactNode
icon/titleIcon:ReactNode/stringName
content: ReactNode
actionPosition: stretch | left | right | center
actions/footer: ReactNode[]
}

message.success(config)
message.error(config)
message.info(config)
message.warning(config)
message.open(config)
message.destroy/close(key?: String)

notification.success(config)
notification.error(config)
notification.info(config)
notification.warning(config)
notification.open(config)
notification.destroy/close(key?: String)

// FIXME: сделать флаг edit для Text компонента  или  лучше  делать  возможность изменять если передан  onChange
// FIXME: shadow property for box component hook
// FIXME: css  colors
bg-1 bg-2 ... (background)
c-1 c-2 ... (color)

// FIXME: Боард динамический где как в винде можно создавать тягать и изменять окна
// FIXME: api - login/password, token, free
// FIXME: api  settings
api где мы настраиваем ключи и домены. Чтобы потом просто выбирать из селектбокса
при запросе получаем имена api проддоменов и разрешения данных


response = {
data: [
{ name: 'user/api/', example: { json} }
]
}


// FIXME: add  Popover  component  (antd)
// FIXME: показывать  вью  борд с  разметочным сразу
// FIXME: добавить  везде  кнопки  сохранить к ак пресет?  или  автоматом  сохранять?



UseWidgetStoreManager
    UseWidgetCRUDStoreManager
    UseWidgetSelectionStoreManager / highlightStoreManager
    UseWidgetGroupStoreManager
    UseWidgetAlignmentStoreManager / DistributionStoreManager




Const widgetManager = useWidgetManager()
widgetManager.showGroupMenu
widgetManager.showAlignMenu
widgetManager.remove()
widgetManager.select()
widgetManager.highlightedWidgets
widgetManager.selectedWidgets
widgetManager.group()
  


/**
* Create stub for hook.
*
* @example
* const mockUseWidgetCRUDStoreManager = () => ({
*   add: jest.fn(),
*   update: jest.fn(),
*   remove: jest.fn(),
*   batch: jest.fn()
* });
*
* const useWidgetCRUDStoreManagerStub = stubHook(mockUseWidgetCRUDStoreManager)
*
* stub.result.add.mockReturnValue(true)
* stub.result.update.mockReturnValue(true)
* stub.result.remove.mockReturnValue(true)
* stub.result.batch.mockReturnValue(true)
*
* jest.mock('./hooks', () => ({
*   ...jest.requireActual('../../../hooks'),
*   useWidgetStoreManager: useWidgetCRUDStoreManagerStub
* }));
*
*
* @param { any } cb Callback which return mocked hook response
* @returns { any } Return mocked value which hook should return
*/
export const stubHook = <
  // eslint-disable-next-line @typescript-eslint/ban-types
  T extends () => any,
  TResult = T & { result: ReturnType<T> }
>() => (cb: T): TResult => {
  const stubValue = cb();
  const stub = () => stubValue;

  stub.result = stubValue;

  return stub as TResult;
};




export const useWidgetStoreManagerStub = stubHook(() => ({
  align: jest.fn(),
  distribute: jest.fn(),
  showAlignMenu: true,
  showGroupMenu: true
}) as any);




все  конверт  функции  должны  называться  с  to
export const toListItem = (value, formatter = (val) => val) => ({ id: value, label: `${ formatter(value) }`, value })


top  ->  t
bottom  ->  b
left  ->  l
right  ->  r



"@typescript-eslint/jsx-quotes": ["warn", "prefer-single"],
"@jsx-quotes": ["warn", "prefer-single"]





если промелькнула   мысль что не знаешь  как  подписаться на  изменения  в депсах то  использовать рефы  


/** Checks if some value is Null or Undefined */
export const isNill = (val: any) => val == null
export const isNotNill = (val: any) => !isNill(val)

export const initArray = <T>(val: T) => Array.isArray(val) ? val : [val].filter(isNotNill)
export const first = <T>(val: T) => val





import { useDispatch } from 'react-redux';
import { setBackendRequestStart, setBackendRequestFinish } from '../../state/actions';


export const useStatus = <TOper extends (...args: Array<any>) => Promise<any>>(
  operation: TOper,
  deps: Array<any> = []
): TOper => {
  const dispatch = useDispatch();

 const operationWithStatus = async (...args: Parameters<TOper>) => {
    try {
      dispatch(setBackendRequestStart());


     return await operation(...args);
    } finally {
      dispatch(setBackendRequestFinish());
    }
  };

 // eslint-disable-next-line no-console
  console.log(deps);

 return operationWithStatus as TOper;
};




Динамическая подгрузка  файлов  и  инициализация
- api (user, task, )  by  -  return router  exeplar  {  init,  close  },  app/api(api),combine/api,store/model/api
- services  (express, database)

обновить реакт
установить зустанд и ку  (проверить ку  перехвадчики  запросов)

services -> api
services/
	database(move  to  api)
	api/router
	
rename  root  folder  ->  server

пересмотреть структуру файлов  для  стора  апи и  зустанд




https://www.npmjs.com/package/generate-react-cli
написать  темплейт  компонента
снапшот в  тестах
создавать сразу  тесты
создавать  все  файлы




мигрировать  на  vite  - https://www.youtube.com/watch?v=ndKgZRM7yjk
